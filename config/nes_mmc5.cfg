SYMBOLS {
    __STACKSIZE__:      type = weak,    value = $0300; # 3 pages stack
}

MEMORY {
    ZP:         start = $0000, size = $0100, file = "", type = rw;
    OAM:        start = $0200, size = $0100, file = "", type = rw;
    RAM:        start = $0300, size = $0500, file = "", type = rw;


    HEADER:     start = $0000, size = $0010, file = %O, type = ro;

    PRG_RAM:    start = $6000, size = $2000, file = "", type = rw, fill = yes, fillval = $DC;

# PRG Mode 0
    #PRG_RAM0:   start = $6000, size = $2000, file = %O, type = rw;
    #PRG_ROM0:   start = $8000, size = $8000, file = %O, type = ro;

# PRG Mode 1
    #PRG_RAM0:  start = $6000, size = $2000, file = %O, type = rw;
    #PRG_ROM1:  start = $8000, size = $4000, file = %O, type = rw;
    #PRG_ROM0:  start = $8000, size = $4000, file = %O, type = ro;
    #PRG_ROM1:  start = $C000, size = $4000, file = %O, type = ro;

# PRG Mode 2
    #PRG_RAM0:  start = $6000, size = $2000, file = %O, type = rw;
    #PRG_RAM1:  start = $8000, size = $4000, file = %O, type = rw;
    #PRG_RAM2:  start = $C000, size = $2000, file = %O, type = rw;
    #PRG_ROM0:  start = $8000, size = $4000, file = %O, type = ro;
    #PRG_ROM1:  start = $C000, size = $2000, file = %O, type = ro;
    #PRG_ROM2:  start = $E000, size = $2000, file = %O, type = ro;

# PRG Mode 3
    #PRG_RAM0:  start = $6000, size = $2000, file = %O, type = rw;
    #PRG_RAM1:  start = $8000, size = $2000, file = %O, type = rw;
    #PRG_RAM2:  start = $A000, size = $2000, file = %O, type = rw;
    #PRG_RAM3:  start = $C000, size = $2000, file = %O, type = rw;
    #PRG_ROM0:  start = $8000, size = $2000, file = %O, type = ro;
    #PRG_ROM1:  start = $A000, size = $2000, file = %O, type = ro;
    #PRG_ROM2:  start = $C000, size = $2000, file = %O, type = ro;
    #PRG_ROM3:  start = $E000, size = $2000, file = %O, type = ro;

    PRG_ROM0:    start = $8000, size = $2000, file = %O, type = ro, fill = yes, fillval = $DB;
    PRG_ROM1:    start = $A000, size = $2000, file = %O, type = ro, fill = yes, fillval = $DC;
    PRG_ROM2:    start = $C000, size = $2000, file = %O, type = ro, fill = yes, fillval = $DD;
    PRG_ROM3:    start = $E000, size = $2000, file = %O, type = ro, fill = yes, fillval = $DE;

# CHR mode 0
    #CHR_ROM0:   start = $0000, size = $2000, file = %O, type = ro

# CHR mode 1
    #CHR_ROM0:   start = $0000, size = $1000, file = %O, type = ro
    #CHR_ROM1:   start = $1000, size = $1000, file = %O, type = ro

# CHR mode 2
    #CHR_ROM0:   start = $0000, size = $0800, file = %O, type = ro
    #CHR_ROM1:   start = $0800, size = $0800, file = %O, type = ro
    #CHR_ROM2:   start = $1000, size = $0800, file = %O, type = ro
    #CHR_ROM3:   start = $1800, size = $0800, file = %O, type = ro

# CHR mode 3
    #CHR_ROM0:   start = $0000, size = $0400, file = %O, type = ro
    #CHR_ROM1:   start = $0400, size = $0400, file = %O, type = ro
    #CHR_ROM2:   start = $0800, size = $0400, file = %O, type = ro
    #CHR_ROM3:   start = $0C00, size = $0400, file = %O, type = ro
    #CHR_ROM4:   start = $1000, size = $0400, file = %O, type = ro
    #CHR_ROM5:   start = $1400, size = $0400, file = %O, type = ro
    #CHR_ROM6:   start = $1800, size = $0400, file = %O, type = ro
    #CHR_ROM7:   start = $1C00, size = $0400, file = %O, type = ro

# 512 KB of CHR ROM
    CHR_ROM:    start = $0000, size = $80000, file = %O, type = ro, fill = yes, fillval = $FF;
}

SEGMENTS {

    HEADER:   load = HEADER,    type = ro, align = $10;

    STARTUP:  load = PRG_ROM3,   type = ro;
    LOWCODE:  load = PRG_ROM3,   type = ro, optional = yes;
    INIT:     load = PRG_ROM3,   type = ro, optional = yes;

    GAME_CODE:   load = PRG_ROM0,   type = ro, optional = yes;
    GAME_RODATA: load = PRG_ROM0,   type = ro, optional = yes;
    GAME_DATA:   load = PRG_ROM0,   type = rw, optional = yes, run = RAM;

    CODE:     load = PRG_ROM1,   type = ro;
    RODATA:   load = PRG_ROM3,   type = ro;
    DATA:     load = PRG_ROM3,   type = rw, run = RAM;
    ONCE:     load = PRG_ROM3,   type = ro, optional = yes;
    VECTORS:  load = PRG_ROM3,   type = ro, start = $FFFA;

    OAM:      load = OAM,       type = bss, align = $100;
    BSS:      load = RAM,       type = bss;
    HEAP:     load = RAM,       type = bss, optional = yes;
    #SRAM:     load = PRG_RAM,   type = bss, optional = yes;

    ZEROPAGE: load = ZP,        type = zp;

    CHR_00:   load = CHR_ROM,   align = $1000, type = ro;
    CHR_01:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_02:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_03:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_04:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_05:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_06:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_07:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_08:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_09:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_0A:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_0B:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_0C:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_0D:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_0E:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_0F:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;

    CHR_10:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_11:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_12:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_13:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_14:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_15:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_16:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_17:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_18:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_19:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_1A:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_1B:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_1C:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_1D:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_1E:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
    CHR_1F:   load = CHR_ROM,   align = $1000, type = ro, optional = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
