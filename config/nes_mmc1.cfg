SYMBOLS {
    __STACKSIZE__:      type = weak,    value = $0300; # 3 pages stack

    NES_MAPPER:         type = export,  value = 1;       # mapper number: 0 NROM, 1 MMC1
    NES_PRG_BANKS:      type = weak,    value = 8;       # number of 16K PRG banks, change to 2 for NROM256
    NES_CHR_BANKS:      type = weak,    value = 16;      # number of 8K CHR banks (0 for CHR RAM)
    NES_MIRRORING:      type = export,  value = 8;       # 0 horizontal, 1 vertical, 8 four screen
    NES_BATTERY:        type = export,  value = 0;       # 0 not present, 1 present
    NES_TRAINER:        type = export,  value = 0;       # 0 not present, 1 present
    NES_CONSOLE_TYPE:   type = export,  value = 0;       # 0 NES/Famicon, 1 NES Vs. System, 2 Playchoice 10, 3 Extended
    NES_2_0:            type = weak,    value = 8;       # 0bMMMM10TT
    NES_2_0_INPUT_TYPE: type = export,  value = 1;       # 0 Unspecified, 1 Standard, 2 Four Score (NES), 8 Zapper
    NES_2_0_SUB_MAPPER: type = export,  value = 0;       # sub mapper support
    NES_2_0_FRAME_TIME: type = export,  value = 2;       # frame timing: 0 NTSC, 1 PAL, 2 NTSC and PAL, 3 Dendy
    NES_2_0_WORK_RAM:   type = export,  value = 0;       # number of 128bytes of working RAM
    NES_2_0_SAVE_RAM:   type = export,  value = 0;       # number of 128bytes of save RAM
}

MEMORY {
    ZP:         start = $0000, size = $0100, type = rw, define = yes;

    HEADER:     start = $0000, size = $0010, file = %O, fill = yes;

    ROM_00:     start = $8000, size = $4000, file = %O, define = no; #, fill = yes, fillval = 1;
    ROM_01:     start = $8000, size = $4000, file = %O, define = no; #, fill = yes, fillval = 2;
    ROM_02:     start = $8000, size = $4000, file = %O, define = no; #, fill = yes, fillval = 3;
    ROM_03:     start = $8000, size = $4000, file = %O, define = no; #, fill = yes, fillval = 4;
    ROM_04:     start = $8000, size = $4000, file = %O, define = no; #, fill = yes, fillval = 5;
    ROM_05:     start = $8000, size = $4000, file = %O, define = no; #, fill = yes, fillval = 6;
    ROM_06:     start = $8000, size = $4000, file = %O, define = no; #, fill = yes, fillval = 7;

    PRG:        start = $C000, size = $4000, file = %O, define = no; #, fill = yes, fillval = $DE;
    OAM:        start = $0200, size = $0100, file = %O, type = rw;

    CHR_00:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 1;
    CHR_01:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 2;
    CHR_02:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 3;
    CHR_03:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 4;
    CHR_04:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 5;
    CHR_05:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 6;
    CHR_06:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 7;
    CHR_07:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 8;
    CHR_08:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 9;
    CHR_09:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 10;
    CHR_0A:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 11;
    CHR_0B:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 12;
    CHR_0C:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 13;
    CHR_0D:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 14;
    CHR_0E:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 15;
    CHR_0F:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 16;
    CHR_10:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 17;
    CHR_11:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 18;
    CHR_12:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 19;
    CHR_13:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 20;
    CHR_14:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 21;
    CHR_15:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 22;
    CHR_16:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 23;
    CHR_17:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 24;
    CHR_18:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 25;
    CHR_19:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 26;
    CHR_1A:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 27;
    CHR_1B:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 28;
    CHR_1C:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 29;
    CHR_1D:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 30;
    CHR_1E:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 31;
    CHR_1F:     start = $0000, size = $1000, file = %O, fill = yes; #, fillval = 32;

    RAM:        start = $0300, size = $0500, define = yes;
    SRAM:       start = $6000, size = $2000, define = yes;
}

SEGMENTS {

    HEADER:   load = HEADER,    type = ro;

    ROM_00:   load = ROM_00,    type = ro, define = no;
    ROM_01:   load = ROM_01,    type = ro, define = no;
    ROM_02:   load = ROM_02,    type = ro, define = no;
    ROM_03:   load = ROM_03,    type = ro, define = no;
    ROM_04:   load = ROM_04,    type = ro, define = no;
    ROM_05:   load = ROM_05,    type = ro, define = no;
    ROM_06:   load = ROM_06,    type = ro, define = no;

    # Stubs that contain reset code to put ourselves into a known fixed-c000 state.
    VECTORS_00: load = ROM_00,   type = ro,  offset = $3FF0;
    VECTORS_01: load = ROM_01,   type = ro,  offset = $3FF0;
    VECTORS_02: load = ROM_02,   type = ro,  offset = $3FF0;
    VECTORS_03: load = ROM_03,   type = ro,  offset = $3FF0;
    VECTORS_04: load = ROM_04,   type = ro,  offset = $3FF0;
    VECTORS_05: load = ROM_05,   type = ro,  offset = $3FF0;
    VECTORS_06: load = ROM_06,   type = ro,  offset = $3FF0;

    STARTUP:  load = PRG,       type = ro, define = yes;
    LOWCODE:  load = PRG,       type = ro,               optional = yes;
    INIT:     load = PRG,       type = ro, define = yes, optional = yes;
    ONCE:     load = PRG,       type = ro, define = yes, optional = yes;

    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    VECTORS:  load = PRG,            type = ro,  offset = $3FFA;

    CHR_00:   load = CHR_00,    type = ro;
    CHR_01:   load = CHR_01,    type = ro;
    CHR_02:   load = CHR_02,    type = ro;
    CHR_03:   load = CHR_03,    type = ro;
    CHR_04:   load = CHR_04,    type = ro;
    CHR_05:   load = CHR_05,    type = ro;
    CHR_06:   load = CHR_06,    type = ro;
    CHR_07:   load = CHR_07,    type = ro;
    CHR_08:   load = CHR_08,    type = ro;
    CHR_09:   load = CHR_09,    type = ro;
    CHR_0A:   load = CHR_0A,    type = ro;
    CHR_0B:   load = CHR_0B,    type = ro;
    CHR_0C:   load = CHR_0C,    type = ro;
    CHR_0D:   load = CHR_0D,    type = ro;
    CHR_0E:   load = CHR_0E,    type = ro;
    CHR_0F:   load = CHR_0F,    type = ro;
    CHR_10:   load = CHR_10,    type = ro;
    CHR_11:   load = CHR_11,    type = ro;
    CHR_12:   load = CHR_12,    type = ro;
    CHR_13:   load = CHR_13,    type = ro;
    CHR_14:   load = CHR_14,    type = ro;
    CHR_15:   load = CHR_15,    type = ro;
    CHR_16:   load = CHR_16,    type = ro;
    CHR_17:   load = CHR_17,    type = ro;
    CHR_18:   load = CHR_18,    type = ro;
    CHR_19:   load = CHR_19,    type = ro;
    CHR_1A:   load = CHR_1A,    type = ro;
    CHR_1B:   load = CHR_1B,    type = ro;
    CHR_1C:   load = CHR_1C,    type = ro;
    CHR_1D:   load = CHR_1D,    type = ro;
    CHR_1E:   load = CHR_1E,    type = ro;
    CHR_1F:   load = CHR_1F,    type = ro;

    OAM:      load = OAM,       type = bss, align = $0100;
    BSS:      load = RAM,       type = bss, define = yes;
    HEAP:     load = RAM,       type = bss, optional = yes;
    SRAM:     load = SRAM,      type = bss, optional = yes;
    ZEROPAGE: load = ZP,        type = zp;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
