SYMBOLS {
    __STACKSIZE__: type = weak, value = $0300; # 3 pages stack

    NES_MAPPER    : type = export, value = 0;       # mapper number
    NES_PRG_BANKS : type = export, value = 2;       # number of 16K PRG banks, change to 2 for NROM256
    NES_CHR_BANKS : type = export, value = 1;       # number of 8K CHR banks
    NES_MIRRORING : type = export, value = 8;       # 0 horizontal, 1 vertical, 8 four screen
    NES_BATTERY   : type = export, value = 0;       # 0 not present, 1 present
    NES_CONSOLE_TYPE : type = export, value = 0;    # 0 NES/Famicon, 1 NES Vs. System, 2 Playchoice 10, 3 Extended
    NES_2_0       : type = export, value = 8;       # 0bMMMM10TT
}
MEMORY {
    ZP:     file = "", start = $0000, size = $0100, type = rw, define = yes;

    # INES Cartridge Header
    HEADER: file = %O, start = $0000, size = $0010, fill = yes;

    # 2 16K ROM Banks
    # - startup
    # - code
    # - rodata
    # - data (load)
    ROM0:   file = %O, start = $8000, size = $7FFA, fill = yes, define = yes;

    # Hardware Vectors at End of 2nd 8K ROM
    ROMV:   file = %O, start = $FFFA, size = $0006, fill = yes;

    # 1 8k CHR Bank
    ROM2:   file = %O, start = $0000, size = $2000, fill = yes;

    # standard 2k SRAM (-zeropage)
    # $0100-$0200 cpu stack
    # $0200-$0500 3 pages for ppu memory write buffer
    # $0500-$0800 3 pages for cc65 parameter stack
    SRAM:   file = "", start = $0500, size = __STACKSIZE__, define = yes;

    # additional 8K SRAM Bank
    # - data (run)
    # - bss
    # - heap
    RAM:    file = "", start = $6000, size = $2000, define = yes;

    DMC:    file = %O, start = $ffc0, size = $003a, fill = yes, define = yes;
    OAM:    file = %O, start = $0200, size = $0100, type  = rw;
}
SEGMENTS {
    ZEROPAGE: load = ZP,              type = zp;
    HEADER:   load = HEADER,          type = ro;
    STARTUP:  load = ROM0,            type = ro,  define   = yes;
    LOWCODE:  load = ROM0,            type = ro,  optional = yes;
    ONCE:     load = ROM0,            type = ro,  optional = yes;
    CODE:     load = ROM0,            type = ro,  define   = yes;
    RODATA:   load = ROM0,            type = ro,  define   = yes;
    DATA:     load = ROM0, run = RAM, type = rw,  define   = yes;
    VECTORS:  load = ROMV,            type = rw;
    CHARS:    load = ROM2,            type = rw;
    BSS:      load = RAM,             type = bss, define   = yes;
    OAM:      load = OAM,             type = bss, align = $0100;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
